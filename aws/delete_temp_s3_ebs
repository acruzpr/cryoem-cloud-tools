#!/usr/bin/env python
import time 
import sys 
import os
import subprocess
from datetime import date
import datetime 

ebs_lifetime=int(subprocess.Popen('echo $EBS_LIFETIME',shell=True, stdout=subprocess.PIPE).stdout.read().strip()) #days
s3_lifetime=int(subprocess.Popen('echo $S3_LIFETIME',shell=True, stdout=subprocess.PIPE).stdout.read().strip())
awsdir=subprocess.Popen('echo $AWS_CLI_DIR', shell=True, stdout=subprocess.PIPE).stdout.read().split()[0]
teamname=subprocess.Popen('echo $RESEARCH_GROUP_NAME',shell=True, stdout=subprocess.PIPE).stdout.read().strip()

#List all S3 buckets& EBS volumes  with rln-aws
numVols=subprocess.Popen('aws ec2 describe-volumes --query "Volumes[*].{VolumeID:VolumeId}" | grep VolumeID | wc -l',shell=True, stdout=subprocess.PIPE).stdout.read().strip()
volsToDelete=[]
vol=1
while vol <= float(numVols):
	description=subprocess.Popen('aws ec2 describe-volumes  --query "Volumes[%i].Tags[*].{Key:Key}" | grep Key' %(vol),shell=True, stdout=subprocess.PIPE).stdout.read().strip().split()
	count2=1
        while count2 <= len(description):
		if description[count2-1] == '"Name"':
        	        value=subprocess.Popen('aws ec2 describe-volumes  --query "Volumes[%i].Tags[*].{Value:Value}" | grep Value' %(vol),shell=True, stdout=subprocess.PIPE).stdout.read().strip()
			nameVol=value.split('"')[count2*2-1]	
		count2=count2+1
	if len(nameVol.split('rln-aws-tmp-%s' %(teamname))) > 1:
		volID=subprocess.Popen('aws ec2 describe-volumes --query "Volumes[%i].{VolumeID:VolumeId}" | grep VolumeID' %(vol),shell=True, stdout=subprocess.PIPE).stdout.read().strip()
		if len(volID.split())>0: 
			volID=volID.split()[-1].split('"')[1]
			createdDate=subprocess.Popen('aws ec2 describe-volumes --query "Volumes[%i].{CreateTime:CreateTime}"'%(vol),shell=True, stdout=subprocess.PIPE).stdout.read().strip().split('"CreateTime":')[-1].split('"')[1]
			status=subprocess.Popen('aws ec2 describe-volumes --query "Volumes[%i].{State:State}" | grep State' %(vol),shell=True, stdout=subprocess.PIPE).stdout.read().strip().split()[-1].split('"')[1]
			if status == 'available': 
				day=createdDate.split('T')[0]
				d0=date(int(day.split('-')[0]),int(day.split('-')[1]),int(day.split('-')[2]))
				d1=date(datetime.datetime.now().year,datetime.datetime.now().month, datetime.datetime.now().day)
				delta = d1 - d0
				timeDiff=delta.days-1
				if timeDiff > ebs_lifetime:
					volsToDelete.append(volID)
		vol=vol+1

if len(volsToDelete)> 0: 
	for vol in volsToDelete: 
	
		cmd='%s/kill_volume.py %s > awslog.log' %(awsdir,vol)
	        subprocess.Popen(cmd,shell=True).wait()

if os.path.exists('awslog.log'): 
	os.remove('awslog.log')

#S3 cleanup
if os.path.exists('s3.log'):
        os.remove('s3.log')
if os.path.exists('s3b.log'):
        os.remove('s3b.log')
s3timelim=float(s3_lifetime)*24*60*60
cmd='aws s3 ls rln-aws-tmp-%s/ >  s3.log' %(teamname)
subprocess.Popen(cmd,shell=True).wait()
s3delete=[]
for line in open('s3.log','r'):
        cmd='aws s3 ls rln-aws-tmp-%s/%s >  s3b.log' %(teamname,line.split()[-1].strip())
        subprocess.Popen(cmd,shell=True).wait()
        for t in open('s3b.log','r'):
                if '-mic' in t: 
			t=t[:-5]
		query=float(t.split()[-1][:-1])
		currtime=time.time()
                diff=currtime-query
                if diff > s3timelim:
                        cmd='aws s3 rm s3://rln-aws-tmp-%s/%s%.0f/ --recursive > s3tmpout.txt' %(teamname,line.split()[-1].strip(),query)
                        subprocess.Popen(cmd,shell=True).wait()
os.remove('s3.log')
os.remove('s3b.log')

