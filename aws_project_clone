#!/usr/bin/env python

import os
import subprocess
import sys 

if len(sys.argv) != 2: 
	print '\nProvide project name to be cloned\n'
	sys.exit()

def cp_from_s3(infile,localdest):
	if os.path.exists('tmpout.log'): 
		os.remove('tmpout.log')
	cmd='aws s3 ls %s > tmpout.log' %(infile)
	subprocess.Popen(cmd,shell=True).wait()

	if len(open('tmpout.log','r').readlines()) > 0: 
		cmd='aws s3 cp s3://%s %s > tmpout.log' %(infile,localdest)
		subprocess.Popen(cmd,shell=True).wait()

	if os.path.exists('tmpout.log'): 
		os.remove('tmpout.log')	

keypair=subprocess.Popen('echo $KEYPAIR_PATH',shell=True, stdout=subprocess.PIPE).stdout.read().strip()
teamname=subprocess.Popen('echo $RESEARCH_GROUP_NAME',shell=True, stdout=subprocess.PIPE).stdout.read().strip()
keyname=keypair.split('/')[-1].split('.pem')[0]
keyname=keyname.split('_')
keyname='-'.join(keyname)

bucketname='rln-aws-%s-%s' %(teamname,keyname)

projectname=sys.argv[1]
localoutdir=projectname

if os.path.exists(localoutdir): 
	print 'Error: destination directory %s already exists. Exiting' %(localoutdir)
	sys.exit()

os.makedirs(localoutdir)

if projectname[-1] != '/': 
	projectname=projectname+'/'

cmd='aws s3 ls %s/%sdefault_pipeline.star > s3tmpout.txt' %(bucketname,projectname)
subprocess.Popen(cmd,shell=True).wait()

if len(open('s3tmpout.txt','r').readlines()) == 0: 
	print 'No project information found for this project. Exiting'
	sys.exit()

if os.path.exists('%s/default_pipeline.star' %(localoutdir)): 
	print 'Error: "%s/default_pipeline.star" exists in current directory. Exiting' %(localoutdir)
	sys.exit()

cmd='aws s3 cp s3://%s/%sdefault_pipeline.star %s/ > s3tmpout.txt' %(bucketname,projectname,localoutdir)
subprocess.Popen(cmd,shell=True).wait()

dirs_in_pipeline=[]
o22=open('%s/default_pipeline.star' %(localoutdir),'r')
for line in o22: 
	if len(line.split()) == 4: 
		dirname=line.split()[0]
		dirs_in_pipeline.append(dirname)
o22.close()

cmd='aws s3 ls %s/%s > s3tmpout.txt' %(bucketname,projectname)
subprocess.Popen(cmd,shell=True).wait()

ignore=['.aws_relion','default_pipeline.star','aws_relion_costs.txt']

print '\nCloning project %s ...\n' %(projectname)

r1=open('s3tmpout.txt','r')
for line in r1: 
	name=line.split()[-1]

	if name not in ignore: 
		if name[:4] != '.gui': 
			if name.split('-')[0] == 'motioncorr': 
				dir1='MotionCorr'
			if name.split('-')[0] == 'ctffind':
        		        dir1='CtfFind'
			if name.split('-')[0] == 'import':
        	        	dir1='Import'
			if name.split('-')[0] == 'class2d':
        		        dir1='Class2D'
			if name.split('-')[0] == 'class3d':
	        	        dir1='Class3D'
			if name.split('-')[0] == 'refine3d':
        		        dir1='Refine3D'
			dir2=name.split('-')[1]
			newdirname=dir1+'/'+dir2
			if newdirname in dirs_in_pipeline: 
				if not os.path.exists('%s/%s' %(localoutdir,dir1)): 
					os.makedirs('%s/%s' %(localoutdir,dir1))
				os.makedirs('%s/%s/' %(localoutdir,newdirname))

				if dir1 == 'MotionCorr':
					cp_from_s3('%s/%s%sdefault_pipeline.star' %(bucketname,projectname,name),'%s/%s/' %(localoutdir,newdirname))
					cp_from_s3('%s/%s%srun.out' %(bucketname,projectname,name),'%s/%s/' %(localoutdir,newdirname))
					cp_from_s3('%s/%s%sjob_pipeline.star' %(bucketname,projectname,name),'%s/%s/' %(localoutdir,newdirname))
					cp_from_s3('%s/%s%snote.txt' %(bucketname,projectname,name),'%s/%s/' %(localoutdir,newdirname))
					os.makedirs('%s/%s/Micrographs' %(localoutdir,newdirname))
					cp_from_s3('%s/%s%scorrected_micrographs.star' %(bucketname,projectname,name),'%s/%s/' %(localoutdir,newdirname))
					cp_from_s3('%s/%s.aws_relion' %(bucketname,projectname),'%s/' %(localoutdir))
					cp_from_s3('%s/%saws_relion_costs.txt' %(bucketname,projectname),'%s/' %(localoutdir))	
					cp_from_s3('%s/%s.aws_relion_project_info' %(bucketname,projectname),'%s/' %(localoutdir))
					cmd='aws s3 sync s3://%s/%s%sMicrographs/ %s/%s/Micrographs/ --exclude "*movie.star" > s3tmpout.log' %(bucketname,projectname,name,localoutdir,newdirname)
					subprocess.Popen(cmd,shell=True).wait()

					cmd='aws s3 ls %s/%s > s3tmpout.log' %(bucketname,projectname)
					subprocess.Popen(cmd,shell=True).wait()

					o11=open('s3tmpout.log','r')
					for line in o11:
						if line.split()[-1][:4] == '.gui':	
							cp_from_s3('%s/%s%s' %(bucketname,projectname,line.split()[-1]),'%s/' %(localoutdir))
					o11.close()

				if dir1 != 'MotionCorr': 
					cmd='aws s3 sync s3://%s/%s%s %s/%s' %(bucketname,projectname,name,localoutdir,newdirname)
					subprocess.Popen(cmd,shell=True).wait()

r1.close()

if os.path.exists('s3tmpout.log'): 
	os.remove('s3tmpout.log')
if os.path.exists('s3tmpout2.log'): 
	os.remove('s3tmpout2.log')
if os.path.exists('s3tmpout.txt'): 
	os.remove('s3tmpout.txt')

